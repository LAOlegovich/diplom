# Generated by Django 5.0.2 on 2024-03-09 18:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('slug_name', models.SlugField(max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Категория',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.CharField(choices=[('1', 'Покупатель'), ('2', 'Продавец'), ('3', 'Администратор_площадки')], default='1', max_length=1, verbose_name='Тип пользователя')),
                ('telephone', models.CharField(max_length=20)),
                ('city', models.CharField(max_length=40, null=True)),
                ('street', models.CharField(max_length=50, null=True)),
                ('house', models.CharField(max_length=10, null=True)),
                ('flat', models.PositiveSmallIntegerField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_order', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('1', 'Предзаказ'), ('2', 'Оформлено'), ('3', 'Обработано')], default='1', max_length=1, verbose_name='Статус заказа')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Корзина заказа',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Наименование')),
                ('model', models.CharField(max_length=30, null=True)),
                ('description', models.TextField(max_length=200, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='backend.category')),
            ],
            options={
                'verbose_name': 'Продукт',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product_positions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField()),
                ('quantity_reserve', models.PositiveIntegerField(default=0)),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(Decimal('0.0'))])),
                ('price_rrc', models.FloatField(validators=[django.core.validators.MinValueValidator(Decimal('0.0'))])),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prod_param', to='backend.product')),
            ],
            options={
                'verbose_name': 'Позиция продукта',
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Название')),
                ('value', models.CharField(max_length=30)),
                ('product_params', models.ManyToManyField(related_name='product_positions', to='backend.product_positions')),
            ],
            options={
                'verbose_name': 'Параметры продукции',
            },
        ),
        migrations.CreateModel(
            name='Order_rec',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_recs', to='backend.order')),
                ('product_position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_record', to='backend.product_positions')),
            ],
            options={
                'verbose_name': 'Позиция заказа',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='prod_position',
            field=models.ManyToManyField(through='backend.Order_rec', to='backend.product_positions'),
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Название')),
                ('address', models.TextField(verbose_name='Адрес')),
                ('URL', models.URLField(max_length=256, null=True)),
                ('file_path', models.CharField(max_length=100, null=True)),
                ('state', models.BooleanField(default=False, verbose_name='статус получения товара')),
                ('categories', models.ManyToManyField(related_name='shops', to='backend.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shops', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Магазин',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='product_positions',
            name='shop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prod_pos_shop', to='backend.shop'),
        ),
    ]
